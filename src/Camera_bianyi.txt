frameworks/base/camera/libcameraservice/ ―― 编译结果 libcameraservice.so
mm-camera2/media-controller/mct   ==>libmmcamera2_mct.so
frameworks/base/core/jni/Android_hardware_Camera.cpp ==> libAndroid_runtime.so 
/frameworks/base/    ==> framework.jar 
/frameworks/base/core/res/  ==> framework-res.apk
frameworks/base/services/java/ ==> services.jar


具体编译目录看：
android.mk文件      
编译出的so库：  LOCAL_MODULE

一 : Android.mk文件概述
- APK程序：一般的Android程序，编译打包生成apk文件。
- JAVA库：java类库，编译打包生成jar包文件。
- C\C++应用程序：可执行的C/C++应用程序。
- C\C++静态库：编译生产C/C++静态库，并打包成.a文件。
- C\C++共享库：编译生成共享库，并打包成.so文件，有且只有共享库才能被安装/复制到APK包中。

二 : 系统变量####
- LOCAL_PATH：这个变量用于给出当前文件的路径，必须在Android.mk的开头定义，可以这样使用LOCAL_PATH := $(call my-dir)，这样这个变量不会被$(CLEAR_VARS)清除，因为每个Android.mk只需要定义一次（即使一个文件中定义了多个模块的情况下）。
- LOCAL_SRC_FILES：当前模块包含的所有源代码文件。
- LOCAL_MODULE：当前模块的名称，这个名称应当是唯一的，并且不能包含空格。模块间的依赖关系就是通过这个名称来引用的。
- LOCAL_MODULE_CLASS：标识所编译模块最后放置的位置。ETC表示放置在/system/etc.目录下，APPS表示放置在/system/app目录下，SHARED_LIBRARIES表示放置在/system/lib目录下。如果具体指定，则编译的模块不会放到编译系统中，最后会在out对应product的obj目录下的对应目录中。
- LOCAL_SRC_FILES：这是要编译的源代码文件列表。只要列出要传递给编译器的文件即可，编译系统会自动计算依赖关系。源代码文件路径都是相相对于LOCAL_PATH的，因此可以使用相对路径进行描述。
- LOCAL_JAVA_LIBRARIES：当前模块依赖的Java共享库，也叫Java动态库。例如framework.jar包。
- LOCAL_STATIC_JAVA_LIBRARIES：当前模块依赖的Java静态库，在Android里，导入的jar包和引用的第三方工程都属于Java静态库。
- LOCAL_STATIC_LIBRARIES：当前模块在运行时依赖的静态库的名称。
- LOCAL_SHARED_LIBRARIES：当前模块在运行时依赖的动态库的名称。
- LOCAL_C_INCLUDES：c或c++语言需要的头文件的路径。
- LOCAL_CFLAGS：提供给C/C++编译器的额外编译参数。
- LOCAL_PACKAGE_NAME：当前APK应用的名称。
- LOCAL_CERTIFICATE：签署当前应用的证书名称。
- LOCAL_MODULE_TAGS：当前模块所包含的标签，一个模块可以包含多个标签。标签的值可能是eng、user、debug、development、optional。其中，optional是默认标签。
- LOCAL_DEX_PREOPT：apk的odex优化开关，默认是false。

在Android.mk文件中，还可以指定最后的目标安装路径，用LOCAL_MODULE_PATH和LOCAL_UNSTRIPPED_PATH来指定


